/**
 * Pure Framework.
 *
 * WARNING: This is part of the Pure Framework. DO NOT EDIT this file under any circumstances.
 * Please do all your modifications in a child theme.
 *
 * @package Pure
 * @author  Boong
 * @link    https://boongstudio.com/themes/pure
 */


(function ($) {
    'use strict';

    var s;

    var $this;

    var Pure = {

        /**
         * Cache variables for better performance.
         */
        settings: {
            document: $(document),
            body: $(document.body),
            window: $(window),
            browserWidth: 0,
            browserHeight: 0,
            menuToggler: $('.menu-toggler'),
            mobileMenuItem: $('.site-navigation.mobile').find('a'),
            mobileMenuToggler: $('.dropdown-toggler'),
        },

        /**
         * Init function.
         * - Assign settings to `s` variable for shorter syntax.
         * - Assign this to `$this` variable to access other function of Pure object inside a function.
         * - Fire run on document ready function.
         * - Add event listeners.
         */
        init: function () {
            s = this.settings;
            $this = this;

            s.window.on('load', function () {
                $this.responsiveVideo();

            });

            if (typeof Slideout === 'function') {

                this.initSlideout();
                s.mobileMenuItem.on('click', this.openMobileMenu);
                s.mobileMenuToggler.on('click', this.toggleMobileMenu);
            }

            $('.back-to-top').on('click', this.backToTop);

            this.initSlick();
            this.updateBrowserDimension();
            this.fullWidthDiv();
            this.initIsotope();

            window.addEventListener('resize', $this.debounce(function () {
                $this.updateBrowserDimension();
                $this.fullWidthDiv();
            }, 200));

            this.initPhotoSwipeFromDOM('.pure-gallery');

            $('.change-loop-layout span').on('click', this.changeLoopLayout);

            $('.pure-search-trigger').on('click', this.searchHandler);

            this.centerLogo();

            $('.search-toggler').on('click', this.toggleSearch);
        },

        /**
         * Update browser demention handler.
         */
        updateBrowserDimension: function () {
            s.browserWidth = s.window.width();
            s.browserHeight = s.window.height();
        },

        /**
         * Better timeout function.
         *
         * @param func
         * @param wait
         * @param immediate
         * @returns {Function}
         */
        debounce: function (func, wait, immediate) {
            var timeout;
            return function () {
                var context = this, args = arguments;
                var later = function () {
                    timeout = null;
                    if (!immediate) func.apply(context, args);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow) func.apply(context, args);
            };
        },

        clickOutsideDivHandler: function (selector, callback) {
            var args = Array.prototype.slice.call(arguments); // Save/convert arguments to array since we won't be able to access these within .on()
            $(document).on("mouseup.clickOFF touchend.clickOFF", function (e) {
                var container = $(selector);

                if (!container.is(e.target) // if the target of the click isn't the container...
                    && container.has(e.target).length === 0) // ... nor a descendant of the container
                {
                    $(document).off("mouseup.clickOFF touchend.clickOFF");
                    if (callback) callback.apply(this, args);
                }
            });
        },

        initSlideout: function () {

            var slideout = new Slideout({
                'panel': document.getElementById('page'),
                'menu': document.getElementById('slideout'),
                'padding': 256,
                'tolerance': 70,
                'touch': false
            });

            slideout.once('open', slideout._initTouchEvents);
            slideout.on('open', slideout.enableTouch);
            slideout.on('close', slideout.disableTouch);

            // Toggle button
            s.menuToggler.on('click', function () {
                slideout.toggle();
            });
        },

        /**
         * Open submenu when user click on menu item for the first time.
         * After submenu open, follow the link of menu when user click on that item at second time.
         *
         * @param e
         * @returns {null}
         */
        openMobileMenu: function (e) {
            e.preventDefault();
            var d = $(this);
            var $href = d.attr('href');
            var $parent = d.parent();

            if (!$parent.hasClass('menu-item-has-children')) {
                window.location.href = $href;
                return null;
            }

            if (!$parent.hasClass('open')) {
                $parent.find('> ul').slideDown();
                $parent.addClass('open');
            } else {
                window.location.href = $href;
                return null;
            }
        },

        /**
         * Toggle submenu when user click on toggle icon.
         */
        toggleMobileMenu: function () {
            $(this).parent().find('> ul').slideToggle();
            $(this).parent().toggleClass('open');
        },

        /**
         * Initialize Slick slider for element with slick class.
         */
        initSlick: function () {
            $('.slick').each(function () {
                $(this).slick();
            });
        },

        /**
         * Stretch div full width.
         */
        fullWidthDiv: function () {
            var target = $('div.full-width');
            target.each(function () {
                var $this = $(this),
                    $width = $this.parent().outerWidth(),
                    $offset = (s.browserWidth - $width) * 0.5;
                $this.css('margin-left', '-' + $offset + 'px');
                $this.css('margin-right', '-' + $offset + 'px');
            });
        },

        /**
         * Animated back to top
         */
        backToTop: function () {
            $('html,body').animate({scrollTop: 0}, 'slow');
            return false;
        },

        /**
         * Isotope
         */
        initIsotope: function () {
            var grid = $('.grid');
            if (grid.is(':empty')) {
                return;
            }
            var isotope;
            if (grid.hasClass('fitrows')) {
                isotope = grid.isotope({
                    layoutMode: 'fitRows',
                    itemSelector: '.grid-item',
                    percentPosition: true,
                });
            } else {
                isotope = grid.isotope({
                    masonry: {
                        columnWidth: '.grid-sizer',
                    },
                    itemSelector: '.grid-item',
                    percentPosition: true,
                });
            }
            grid.imagesLoaded(function () {
                grid.isotope('layout');
            });
        },

        /**
         * Init photoswipe from DOM
         * @param gallerySelector
         */
        initPhotoSwipeFromDOM: function (gallerySelector) {

            // parse slide data (url, title, size ...) from DOM elements
            // (children of gallerySelector)
            var parseThumbnailElements = function (el) {
                var thumbElements = el.childNodes,
                    numNodes = thumbElements.length,
                    items = [],
                    figureEl,
                    linkEl,
                    size,
                    item;

                for (var i = 0; i < numNodes; i++) {

                    figureEl = thumbElements[i]; // <figure> element

                    // include only element nodes
                    if (figureEl.nodeType !== 1 || figureEl.nodeName !== 'FIGURE') {
                        continue;
                    }

                    linkEl = figureEl.children[0]; // <a> element

                    size = linkEl.getAttribute('data-size').split('x');

                    // create slide object
                    item = {
                        src: linkEl.getAttribute('href'),
                        w: parseInt(size[0], 10),
                        h: parseInt(size[1], 10)
                    };


                    if (figureEl.children.length > 1) {
                        // <figcaption> content
                        item.title = figureEl.children[1].innerHTML;
                    }

                    if (linkEl.children.length > 0) {
                        // <img> thumbnail element, retrieving thumbnail url
                        item.msrc = linkEl.children[0].getAttribute('src');
                    }

                    item.el = figureEl; // save link to element for getThumbBoundsFn
                    items.push(item);
                }

                return items;
            };

            // find nearest parent element
            var closest = function closest(el, fn) {
                return el && (fn(el) ? el : closest(el.parentNode, fn));
            };

            // triggers when user clicks on thumbnail
            var onThumbnailsClick = function (e) {
                e = e || window.event;
                e.preventDefault ? e.preventDefault() : e.returnValue = false;

                var eTarget = e.target || e.srcElement;

                // find root element of slide
                var clickedListItem = closest(eTarget, function (el) {
                    return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
                });

                if (!clickedListItem) {
                    return;
                }

                // find index of clicked item by looping through all child nodes
                // alternatively, you may define index via data- attribute
                var clickedGallery = clickedListItem.parentNode,
                    childNodes = clickedListItem.parentNode.childNodes,
                    numChildNodes = childNodes.length,
                    nodeIndex = 0,
                    index;

                for (var i = 0; i < numChildNodes; i++) {
                    if (childNodes[i].nodeType !== 1) {
                        continue;
                    }

                    if (childNodes[i] === clickedListItem) {
                        index = nodeIndex;
                        break;
                    }
                    nodeIndex++;
                }


                if (index >= 0) {
                    // open PhotoSwipe if valid index found
                    openPhotoSwipe(index, clickedGallery);
                }
                return false;
            };

            // parse picture index and gallery index from URL (#&pid=1&gid=2)
            var photoswipeParseHash = function () {
                var hash = window.location.hash.substring(1),
                    params = {};

                if (hash.length < 5) {
                    return params;
                }

                var vars = hash.split('&');
                for (var i = 0; i < vars.length; i++) {
                    if (!vars[i]) {
                        continue;
                    }
                    var pair = vars[i].split('=');
                    if (pair.length < 2) {
                        continue;
                    }
                    params[pair[0]] = pair[1];
                }

                if (params.gid) {
                    params.gid = parseInt(params.gid, 10);
                }

                return params;
            };

            var openPhotoSwipe = function (index, galleryElement, disableAnimation, fromURL) {
                var pswpElement = document.querySelectorAll('.pswp')[0],
                    gallery,
                    options,
                    items;

                items = parseThumbnailElements(galleryElement);

                // define options (if needed)
                options = {

                    // define gallery index (for URL)
                    galleryUID: galleryElement.getAttribute('data-pswp-uid'),

                    getThumbBoundsFn: function (index) {
                        // See Options -> getThumbBoundsFn section of documentation for more info
                        var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                            pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                            rect = thumbnail.getBoundingClientRect();

                        return {x: rect.left, y: rect.top + pageYScroll, w: rect.width};
                    }

                };

                // PhotoSwipe opened from URL
                if (fromURL) {
                    if (options.galleryPIDs) {
                        // parse real index when custom PIDs are used
                        // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
                        for (var j = 0; j < items.length; j++) {
                            if (items[j].pid == index) {
                                options.index = j;
                                break;
                            }
                        }
                    } else {
                        // in URL indexes start from 1
                        options.index = parseInt(index, 10) - 1;
                    }
                } else {
                    options.index = parseInt(index, 10);
                }

                // exit if index not found
                if (isNaN(options.index)) {
                    return;
                }

                if (disableAnimation) {
                    options.showAnimationDuration = 0;
                }

                // Pass data to PhotoSwipe and initialize it
                gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
                gallery.init();
            };

            // loop through all gallery elements and bind events
            var galleryElements = document.querySelectorAll(gallerySelector);

            for (var i = 0, l = galleryElements.length; i < l; i++) {
                galleryElements[i].setAttribute('data-pswp-uid', i + 1);
                galleryElements[i].onclick = onThumbnailsClick;
            }

            // Parse URL and open gallery if it contains #&pid=3&gid=1
            var hashData = photoswipeParseHash();
            if (hashData.pid && hashData.gid) {
                openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);
            }
        },

        /**
         * Change layout handler.
         */
        changeLoopLayout: function () {
            var $this = $(this),
                layout = $this.attr('data-layout'),
                target = $this.parent().attr('data-target'),
                $target = $(target);

            $target.removeClass('loop--list');
            $target.removeClass('loop--grid');
            $target.addClass('loop--' + layout);
        },

        /**
         * Search pop up
         */
        searchHandler: function (e) {
            e.preventDefault();
            $('.pure-search-holder').fadeIn().addClass('active').find('input').focus();
            $this.clickOutsideDivHandler('.pure-search-holder .inner', $this.closeSearchHolder)
        },
        closeSearchHolder: function () {
            $('.pure-search-holder').fadeOut().removeClass('active');
        },

        /**
         * Make logo center.
         */
        centerLogo: function () {
            var $header = $('.site-header.v1');
            if ($header.length === 0) return;
            var $centerEls = $header.find('.site-title');
            if ($centerEls.length === 0) return;

            var $wrapper = $header.find('.middle'),
                $wrapperOffset = $wrapper.offset(),
                $centerEl = $centerEls.first(),
                $centerElsBefore = $centerEl.prevAll(),
                $centerElBefore = false,
                $centerElBeforeClass = false;

            $centerElsBefore.each(function () {
                var $this = $(this),
                    $classes = $this.attr('class');
                if (typeof $classes !== 'undefined' && $classes.indexOf('flex') !== -1) {
                    $centerElBefore = $this;
                    $centerElBeforeClass = $classes;
                    return false;
                }
            });

            if ($centerElBeforeClass) {
                $centerElBefore.css('flex-grow', '0');
            }

            var $centerElOffset = $centerEl.offset(),
                $centerElWidth = $centerEl.outerWidth(),
                $wrapperWidth = $wrapper.outerWidth(),
                $padding = $wrapperWidth / 2 - ($centerElOffset.left - $wrapperOffset.left) - $centerElWidth / 2;
            if ($padding <= 0) return;

            if ($centerElBeforeClass) {
                $centerElBefore.css('width', $padding + 'px');
            } else {
                $centerEl.css('margin-left', $padding + 'px');
            }
        },

        /**
         * Responsive video in entry content.
         */
        responsiveVideo: function () {
            var $content = $('.single-content > .entry-content'),
                $iframes = $content.find('iframe'),
                contentWidth = $content.width();
            $iframes.each(function () {
                var $this = $(this);
                if ($this.attr('src').indexOf('youtube') != -1) {
                    $this.css({
                        width: contentWidth + 'px',
                        height: (contentWidth * 0.5625) + 'px',
                    });
                }
            });
        },

        /**
         * Show search form when user click on search-toggler
         */
        toggleSearch: function () {
            var $toggler = $(this);
            var $search = $('.search-holder');
            $search.toggleClass('active');
            if ($search.hasClass('active')) {
                $search.find('.search-field').focus();
                $toggler.html('<i class="fa fa-times"></i>');
            } else {
                $toggler.html('<i class="fa fa-search"></i>');
            }
            $search.find('.search-close').on('click', $this.toggleSearch);
        },

    };

    Pure.init();

}(jQuery));
