<?php
/**
 * Pure Framework.
 *
 * WARNING: This is part of the Pure Framework. DO NOT EDIT this file under any circumstances.
 * Please do all your modifications in a child theme.
 *
 * @package Pure
 * @author  Boong
 * @link    https://boongstudio.com/themes/pure
 */

/**
 * Check for home page in edge case.
 *
 * @return bool
 */
function pure_is_root_page() {

	return is_front_page() || ( is_home() && get_option( 'page_for_posts' ) && !get_option( 'page_on_front' ) && !get_queried_object() );
}

/**
 * Check for User Agent.
 *
 * @return string
 */
function pure_user_agent( $agent ) {

	$detect = new Mobile_Detect;

	if ( $detect->isTablet() ) {
		return 'tablet' === $agent;
	}

	if ( $detect->isMobile() ) {
		return 'mobile' === $agent;
	}

	return 'desktop' === $agent;
}

/**
 * Merge two arrays regardless of depth.
 *
 * @param array $array1
 * @param array $array2
 *
 * @return array
 */
function pure_array_merge_deep( array & $array1, array & $array2 ) {

	$merged = $array1;

	foreach ( $array2 as $key => & $value ) {
		if ( is_array( $value ) && isset( $merged[ $key ] ) && is_array( $merged[ $key ] ) ) {
			$merged[ $key ] = pure_array_merge_deep( $merged[ $key ], $value );
		} else if ( is_numeric( $key ) ) {
			if ( !in_array( $value, $merged ) ) {
				$merged[] = $value;
			}
		} else {
			$merged[ $key ] = $value;
		}
	}

	return $merged;
}

/**
 * Get array of categories where current post attached to.
 *
 * @return array
 */
function pure_get_cats_id() {

	global $post;
	$cats              = array();
	$current_post_cats = get_the_category( $post->ID );
	foreach ( $current_post_cats as $key => $value ) {
		$cats[] = $value->term_id;
	};

	return $cats;
}

/**
 * Resize image on the fly.
 *
 * @param      $attachment
 * @param bool $width
 * @param bool $height
 * @param bool $crop
 *
 * @return mixed|WP_Error
 */
function pure_resize( $attachment, $width = false, $height = false, $crop = false ) {

	$attachment_info = wp_get_attachment_metadata( $attachment );

	if ( !$attachment_info ) {
		return new WP_Error( 'invalid_attachment', 'Invalid Attachment', $attachment );
	}

	$upload    = wp_upload_dir();
	$file_path = $upload[ 'basedir' ] . '/' . $attachment_info[ 'file' ];
	$info      = pathinfo( $file_path );
	$dir       = $info[ 'dirname' ];
	$ext       = ( isset( $info[ 'extension' ] ) ) ? $info[ 'extension' ] : 'jpg';
	$name      = wp_basename( $file_path, ".$ext" );
	$name      = preg_replace( '/(.+)(\-\d+x\d+)$/', '$1', $name );
	{
		if ( !$width || !$height ) {
			$editor = wp_get_image_editor( $file_path );

			if ( is_wp_error( $editor ) ) {
				return $editor;
			}

			$size        = $editor->get_size();
			$orig_width  = $size[ 'width' ];
			$orig_height = $size[ 'height' ];
			if ( !$height && $width ) {
				$height = round( ( $orig_height * $width ) / $orig_width );
			} elseif ( !$width && $height ) {
				$width = round( ( $orig_width * $height ) / $orig_height );
			} else {
				return $attachment;
			}
		}
	}

// Suffix applied to filename
	$suffix = "{$width}x{$height}";

// Get the destination file name
	$destination_origin_file_name = "{$dir}/{$name}.{$ext}";
	$destination_file_name        = "{$dir}/{$name}-{$suffix}.{$ext}";

// No need to resize & create a new image if it already exists
	if ( !file_exists( $destination_file_name ) ) {
		//Image Resize
		$editor = ( isset( $editor ) ) ? $editor : wp_get_image_editor( $file_path );

		if ( is_wp_error( $editor ) ) {
			return new WP_Error( 'wp_image_editor', 'WP Image editor can\'t resize this attachment', $attachment );
		}

// Get the original image size
		$size        = $editor->get_size();
		$orig_width  = $size[ 'width' ];
		$orig_height = $size[ 'height' ];

		$src_x = $src_y = 0;
		$src_w = $orig_width;
		$src_h = $orig_height;

		if ( $crop ) {

			$cmp_x = $orig_width / $width;
			$cmp_y = $orig_height / $height;

			if ( $cmp_x > $cmp_y ) {
				$src_w = round( $orig_width / $cmp_x * $cmp_y );
				$src_x = round( ( $orig_width - ( $orig_width / $cmp_x * $cmp_y ) ) / 2 );
			} else if ( $cmp_y > $cmp_x ) {
				$src_h = round( $orig_height / $cmp_y * $cmp_x );
				$src_y = round( ( $orig_height - ( $orig_height / $cmp_y * $cmp_x ) ) / 2 );
			}
		}

		$editor->crop( $src_x, $src_y, $src_w, $src_h, $width, $height );

		$saved = $editor->save( $destination_file_name );

		$images = wp_get_attachment_metadata( $attachment );
		if ( !empty( $images[ 'resizes' ] ) && is_array( $images[ 'resizes' ] ) ) {
			foreach ( $images[ 'resizes' ] as $image_size => $image_path ) {
				$images[ 'resizes' ][ $image_size ] = addslashes( $image_path );
			}
		}
		$uploads_dir                    = wp_upload_dir();
		$images[ 'resizes' ][ $suffix ] = $uploads_dir[ 'subdir' ] . '/' . $saved[ 'file' ];
		wp_update_attachment_metadata( $attachment, $images );
	}

	return str_replace( basename( wp_get_attachment_url( $attachment ) ), basename( $destination_file_name ), wp_get_attachment_url( $attachment ) );
}

function pure_get_image( $attachment_id, $width, $height, $attr = array(), $crop = true ) {

	$image = '<img src="' . pure_resize( $attachment_id, $width, $height, $crop ) . '" ';
	foreach ( $attr as $name => $value ) {
		$image .= " $name=\"$value\" ";
	}
	$image .= ' />';

	return $image;
}

function pure_get_image_url( $attachment_id, $width, $height, $crop = true ) {

	return pure_resize( $attachment_id, $width, $height, $crop );
}

function pure_get_post_thumbnail( $post_id, $width, $height, $attr = array(), $crop = true ) {

	$post = get_post( $post_id );
	if ( !$post ) {
		return '';
	}
	$post_thumbnail_id = get_post_thumbnail_id( $post );

	return pure_get_image( $post_thumbnail_id, $width, $height, $attr, $crop );
}

function pure_get_post_thumbnail_url( $post_id, $width, $height, $crop = true ) {

	$post = get_post( $post_id );
	if ( !$post ) {
		return '';
	}
	$post_thumbnail_id = get_post_thumbnail_id( $post );

	return pure_resize( $post_thumbnail_id, $width, $height, $crop );
}

function pure_get_option( $key, $default = null ) {

	if ( get_theme_mod( $key ) ) {
		return get_theme_mod( $key );
	}

	if ( pure_get_default_option( $key ) ) {
		return pure_get_default_option( $key );
	}

	if ( $default !== null ) {
		return $default;
	}

	return false;
}

function pure_get_default_option( $key = '' ) {

	$options = array(
		'body_font_size'      => 14,
		'heading_font_weight' => '700',

		'button_height' => 40,
		'button_radius' => 3,

		'primary_color'   => '#1a93cd',
		'secondary_color' => '#313657',
		'text_color'      => '#656a83',
		'heading_color'   => '#313657',
		'border_color'    => '#c7d7e0',
		'meta_color'      => '#888888',

		'primary_bg'   => '#ffffff',
		'secondary_bg' => '#f4f4f4',

		'footer_bg' => array(
			'color' => '#f5f5f5',
		),

		'footer_heading_color'    => '#313657',
		'footer_text_color'       => '#656a83',
		'footer_link_color'       => '#1a93cd',
		'footer_link_hover_color' => '#313657',
		'footer_text_size'        => 14,
		'footer_heading_size'     => 16,

		'wc_mini_cart_title'    => __( 'Mini cart', 'pure' ),
		'wc_mini_cart_position' => 'right',

		'wc_quick_view' => true,

		'wc_listing_style'   => 'fitrows',
		'wc_listing_perpage' => '12',

		'wc_single_style'                 => 1,
		'wc_single_thumbnails_position'   => 'bottom',
		'wc_single_remove_featured_image' => false,

		'wc_related_title' => __( 'Related Products', 'pure' ),
		'wc_related_count' => 8,

		'wc_tab_style'    => 'h-tab',
		'wc_tab_position' => 'above_related',

		'wc_add_to_cart_type'  => 'ajax',
		'wc_add_to_cart_text'  => __( 'Add to cart', 'pure' ),
		'wc_add_to_cart_large' => true,

	);

	$custom = apply_filters( 'pure_get_default_option', array() );

	$options = pure_array_merge_deep( $options, $custom );

	if ( array_key_exists( $key, $options ) ) {
		return $options[ $key ];
	}

	return '';
}

add_filter( 'kirki_load_fontawesome', '__return_false' );
/**
 * Prevent kirki load fontawesome.
 */
add_filter( 'relevanssi_hits_filter', 'separate_result_types' );
function separate_result_types( $hits ) {

	$types              = array();
	$types[ 'product' ] = array();
	$types[ 'post' ]    = array();
	$types[ 'page' ]    = array();
	$types[ 'gallery' ] = array();

	// Split the post types in array $types
	if ( !empty( $hits ) ) {
		foreach ( $hits[ 0 ] as $hit ) {
			if ( !is_array( $types[ $hit->post_type ] ) ) {
				$types[ $hit->post_type ] = array();
			}
			array_push( $types[ $hit->post_type ], $hit );
		}
	}

	// Merge back to $hits in the desired order
	$hits[ 0 ] = array_merge( $types[ 'post' ], $types[ 'page' ], $types[ 'gallery' ], $types[ 'product' ] );

	return $hits;
}
