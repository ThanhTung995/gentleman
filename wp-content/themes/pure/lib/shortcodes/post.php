<?php
/**
 * Pure Framework.
 *
 * WARNING: This is part of the Pure Framework. DO NOT EDIT this file under any circumstances.
 * Please do all your modifications in a child theme.
 *
 * @package Pure
 * @author  Boong
 * @link    https://boongstudio.com/themes/pure
 */

add_shortcode( 'post_time', 'pure_post_time_shortcode' );
/**
 * Produces the date of post publication.
 *
 * Supported shortcode attributes are:
 *   after (output after link, default is empty string),
 *   before (output before link, default is empty string),
 *   format (date format, default is value in date_format option field),
 *   label (text following 'before' output, but before date).
 *
 * Output passes through `pure_post_date_shortcode` filter before returning.
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Output for `post_date` shortcode.
 */
function pure_post_time_shortcode( $atts ) {

	$defaults = array(
		'after'  => '',
		'before' => apply_filters( 'pure_post_time_shortcode_before', '' ),
		'format' => get_option( 'date_format' ),
		'label'  => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_time' );

	if ( 'relative' === $atts['format'] ) {
		$display = human_time_diff( get_the_time( 'U' ), current_time( 'timestamp' ) );
		$display .= ' ' . __( 'ago', 'pure' );
	} else {
		$display = get_the_time( $atts['format'] );
	}

	$output = sprintf( '<time %s>', pure_attr( 'entry-time' ) ) . $atts['before'] . $atts['label'] . $display . $atts['after'] . '</time>';

	return apply_filters( 'pure_post_time_shortcode', $output, $atts );

}

add_shortcode( 'post_modified_time', 'pure_post_modified_time_shortcode' );
/**
 * Produces the modification date of post publication.
 *
 * Output passes through `pure_post_date_shortcode` filter before returning.
 *
 * @param array|string $atts Shortcode attributes. Empty string if no attributes.
 * @return string Output for `post_date` shortcode.
 */
function pure_post_modified_time_shortcode( $atts ) {

	$defaults = array(
		'after'          => '',
		'before'         => '',
		'format'         => get_option( 'date_format' ),
		'label'          => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_time' );

	$display = get_the_modified_time( $atts['format'] );

	$output = sprintf( '<time %s>', pure_attr( 'entry-modified-time' ) ) . $atts['before'] . $atts['label'] . $display . $atts['after'] . '</time>';

	return apply_filters( 'pure_post_modified_time_shortcode', $output, $atts );
}

add_action( 'post_author', 'pure_post_author_shortcode' );
/**
 * Render the post author without link.
 *
 * Filter with `pure_post_author_shortcode` before returning.
 *
 * @param array $atts Shortcode attributes.
 */
function pure_post_author_shortcode( $atts ) {

	if ( ! post_type_supports( get_post_type(), 'author' ) ) {
		return;
	}

	$author = get_the_author();

	if ( ! $author ) {
		return '';
	}

	$defaults = array(
		'after'  => '',
		'before' => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_author' );

	$output  = sprintf( '<span %s>', pure_attr( 'entry-author' ) );
	$output .= $atts['before'];
	$output .= sprintf( '<span %s>', pure_attr( 'entry-author-name' ) );
	$output .= esc_html( $author );
	$output .= '</span>' . $atts['after'] . '</span>';

	return apply_filters( 'pure_post_author_link_shortcode', $output, $atts );

}

add_shortcode( 'post_author_link', 'pure_post_author_link_shortcode' );
/**
 * Render the post author link.
 *
 * Filter with `pure_post_author_link_shortcode` before returning.
 *
 * @param array $atts Shortcode attributes.
 */
function pure_post_author_link_shortcode( $atts ) {

	if ( ! post_type_supports( get_post_type(), 'author' ) ) {
		return;
	}

	$url = get_the_author_meta( 'url' );

	if ( ! $url ) {
		return pure_post_author_shortcode( $atts );
	}

	$author = get_the_author();

	if ( ! $author ) {
		return '';
	}

	$defaults = array(
		'after'  => '',
		'before' => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_author_link' );

	$output  = sprintf( '<span %s>', pure_attr( 'entry-author' ) );
	$output .= $atts['before'];
	$output .= sprintf( '<a href="%s" %s>', $url, pure_attr( 'entry-author-link' ) );
	$output .= sprintf( '<span %s>', pure_attr( 'entry-author-name' ) );
	$output .= esc_html( $author );
	$output .= '</span></a>' . $atts['after'] . '</span>';

	return apply_filters( 'pure_post_author_link_shortcode', $output, $atts );
}

add_shortcode( 'post_author_posts_link', 'pure_post_author_posts_link_shortcode' );
/**
 * Render link to the author archive.
 *
 * Filter with `pure_post_author_link_shortcode` before returning.
 *
 * @param array $atts Shortcode attributes.
 */
function pure_post_author_posts_link_shortcode( $atts ) {

	if ( ! post_type_supports( get_post_type(), 'author' ) ) {
		return;
	}

	$url = get_the_author_meta( 'url' );

	$author = get_the_author();

	if ( ! $author ) {
		return '';
	}

	$defaults = array(
		'after'  => '',
		'before' => '',
	);

	$atts = shortcode_atts( $defaults, $atts, 'post_author_posts_link' );

	$url = get_author_posts_url( get_the_author_meta( 'ID' ) );

	$output  = sprintf( '<span %s>', pure_attr( 'entry-author' ) );
	$output .= $atts['before'];
	$output .= sprintf( '<a href="%s" %s>', $url, pure_attr( 'entry-author-link' ) );
	$output .= sprintf( '<span %s>', pure_attr( 'entry-author-name' ) );
	$output .= esc_html( $author );
	$output .= '</span></a>' . $atts['after'] . '</span>';

	return apply_filters( 'pure_post_author_posts_link_shortcode', $output, $atts );
}
