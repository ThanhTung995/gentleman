<?php
/**
 * Pure Framework.
 *
 * WARNING: This is part of the Pure Framework. DO NOT EDIT this file under any circumstances.
 * Please do all your modifications in a child theme.
 *
 * @package Pure
 * @author  Boong
 * @link    https://boongstudio.com/themes/pure
 */

add_action( 'pure_entry_header', 'pure_entry_header_open', 5 );
/**
 * Render the opening tag for the entry header.
 */
function pure_entry_header_open() {

	pure_tag( array(
		'open'    => '<header %s>',
		'context' => 'entry-header',
	) );
}

add_action( 'pure_entry_header', 'pure_entry_header_close', 100 );
/**
 * Render the closing tag for the entry header.
 */
function pure_entry_header_close() {

	pure_tag( array(
		'close'   => '</header>',
		'context' => 'entry-header',
	) );
}

add_action( 'pure_entry_header', 'pure_entry_title' );
/**
 * Render the title for both loop and single post.
 */
function pure_entry_title() {

	$title = apply_filters( 'pure_entry_title_text', get_the_title() );

	if ( !$title ) {
		return;
	}

	if ( !is_singular() && apply_filters( 'pure_link_entry_title', true ) ) {
		$title = sprintf(
			'<a href="%1$s" rel="bookmark" title="%2$s">%2$s</a>',
			get_permalink(),
			$title
		);
	}

	$tag = apply_filters( 'pure_entry_title_tag', 'h3' );

	$tag = is_singular() ? 'h1' : $tag;

	$output = pure_tag( array(
		'open'    => "<{$tag} %s>",
		'close'   => "</{$tag}>",
		'content' => $title,
		'context' => 'entry-title',
		'echo'    => false,
	) );

	echo apply_filters( 'pure_entry_title_output', $output, $tag, $title ) . "\n";
}

add_filter( 'pure_entry_meta', 'do_shortcode' );

add_action( 'pure_entry_header', 'pure_entry_meta_before', 12 );
/**
 * Render post info. ( Byline, posted on,  )
 */
function pure_entry_meta_before() {

	// Short-circuit if post type is not supported.
	if ( !post_type_supports( get_post_type(), 'pure-entry-meta-before' ) ) {
		return;
	}

	$output = apply_filters( 'pure_entry_meta', '[post_time][post_modified_time] <span class="entry-post-author">' . __( 'by ', 'pure' ) . '[post_author_posts_link]</span>' );

	if ( false === trim( $output ) ) {
		return;
	}

	pure_tag( array(
		'open'    => '<p %s>',
		'close'   => '</p>',
		'content' => pure_strip_p_tags( $output ),
		'context' => 'entry-meta-before',
	) );

}

add_action( 'pure_entry_content', 'pure_entry_content' );
/**
 * Render content for both single and archive.
 */
function pure_entry_content() {

	if ( is_singular() ) {
		the_content();

		if ( is_single() && 'open' === get_option( 'default_ping_status' ) && post_type_supports( get_post_type(), 'trackbacks' ) ) {
			echo '<!--';
			trackback_rdf();
			echo '-->' . "\n";
		}

		if ( apply_filters( 'pure_edit_post_link', false ) ) {
			edit_post_link( __( 'Edit', 'pure' ), '', '' );
		}
	} else {
		echo get_the_excerpt();
		if ( apply_filters( 'pure_show_read_more', true ) ) {
			printf( '<a href="%s" %s>', get_permalink(), pure_attr( 'read-more' ) );
			esc_html_e( 'Read more', 'pure' );
			echo '</a>';
		}
	}
}

add_action( 'pure_loop_else', 'pure_no_posts' );
/**
 * Filtered message when there is nothing to show.
 */
function pure_no_posts() {

	printf( '<div class="loop__item"><div class="entry"><p>%s</p></div></div>', apply_filters( 'pure_no_posts_text', __( 'Nothing found.', 'pure' ) ) );
}

add_action( 'pure_entry_footer', 'pure_entry_footer_open', 5 );
/**
 * Render the opening tag for the entry footer.
 */
function pure_entry_footer_open() {

	pure_tag( array(
		'open'    => '<footer %s>',
		'context' => 'entry-footer',
	) );
}

add_action( 'pure_entry_footer', 'pure_entry_footer_close', 100 );
/**
 * Render the closing tag for the entry footer.
 */
function pure_entry_footer_close() {

	pure_tag( array(
		'close'   => '</footer>',
		'context' => 'entry-footer',
	) );
}

add_action( 'pure_after_entry_content', 'pure_link_pages' );
/**
 * Output the page links for "multiple page" post.
 */
function pure_link_pages() {

	wp_link_pages( array(
		'before' => '<div class="page-links">' . __( 'Pages:', 'pure' ),
		'after'  => '</div>',
	) );
}

add_action( 'pure_after_loop_while', 'pure_posts_nav' );
/**
 * Render number pagination.
 */
function pure_posts_nav() {

	the_posts_pagination(
		array(
			'prev_text' => '<i class="' . apply_filters( 'pure_posts_nav_prev_icon', 'far fa-arrow-left' ) . '"></i><span class="screen-reader-text">' . __( 'Previous page', 'pure' ) . '</span>',
			'next_text' => '<span class="screen-reader-text">' . __( 'Next page', 'pure' ) . '</span><i class="' . apply_filters( 'pure_posts_nav_next_icon', 'far fa-arrow-right' ) . '"></i>',
		)
	);
}

add_action( 'template_redirect', 'pure_action_social_sharing' );
/**
 * Add social sharing to single and archive. Can change via filter.
 * Default only single.
 */
function pure_action_social_sharing() {

	$single_only = apply_filters( 'pure_social_sharing_single_only', true );
	if ( $single_only ) {
		if ( !is_single() ) {
			return;
		}
	}
	add_action( 'pure_entry_header', 'pure_social_sharing', 15 );
	add_action( 'pure_entry_footer', 'pure_social_sharing', 15 );
}

/**
 * Social sharing templates.
 */
function pure_social_sharing() {

	$classes = apply_filters( 'pure_social_sharing_class', ' social-sharing ' );

	$permalink = get_permalink();
	$title     = get_the_title();
	?>

    <div class="<?php echo esc_attr( $classes ); ?>">
        <div class="left">
            <div class="fb-like" data-href="<?php echo $permalink; ?>" data-layout="button_count" data-action="like"
                 data-size="small" data-show-faces="false" data-share="true" style="height:20px;"></div>
            <iframe allowtransparency="true" text="<?php echo $title; ?>" frameborder="0" scrolling="no"
                    src="https://platform.twitter.com/widgets/tweet_button.html?url=<?php echo $permalink; ?>"
                    style="width:62px;height:20px;"></iframe>
            <iframe
                    src="https://apis.google.com/u/0/se/0/_/+1/fastbutton?usegapi=1&amp;size=medium&amp;hl=vi&amp;origin=<?php home_url( '/' ); ?>&amp;url=<?php echo $permalink; ?>"
                    marginheight="0" marginwidth="0" frameborder="0" scrolling="no"
                    style="border:0;width:33px;height:20px;"></iframe>
        </div>
        <div class="right">
            <div class="fb-send" data-href="<?php echo $permalink; ?>" data-colorscheme="light"></div>
        </div>
    </div>
	<?php
}

add_action( 'pure_entry_footer', 'pure_tag_list', 20 );
/**
 * Tag list for post.
 */
function pure_tag_list() {

	if ( !is_single() ) {
		return;
	}
	?>
    <div class="tags-list">
		<?php echo get_the_tag_list( '<span class="txt"><i class="fa fa-tags"></i> Tags:</span>', '<span class="divider">,</span> ', '' ); ?>
    </div>
	<?php
}

add_action( 'pure_after_entry', 'pure_related_posts' );
/**
 * Print related posts.
 * By default, choose automatically posts in same category.
 * Get more than one post and remove current post by PHP, not MySQL because of performance issue.
 */
function pure_related_posts() {

	if ( !is_single() ) {
		return;
	}

	$related_enable = apply_filters( 'pure_enable_related_posts', true );
	if ( !$related_enable ) {
		return;
	}

	$related = array(
		'count' => apply_filters( 'pure_related_posts_count', 6 ),
		'title' => apply_filters( 'pure_related_posts_title', __( 'Related Posts', 'pure' ) ),
	);

	$current_post_id = get_the_ID();

	$posts_per_page = $related[ 'count' ] + 1;

	// Get custom related posts
	$custom_related_posts = array();
	if ( function_exists( 'get_field' ) ) {
		$custom_related_posts = get_field( 'related_posts', $current_post_id );
	}

	if ( !empty( $custom_related_posts ) ) {
		$args           = array(
			'post_type' => 'post',
			'order'     => 'DESC',
			'post__in'  => $custom_related_posts,
		);
		$posts_per_page = sizeof( $custom_related_posts ) + 1;
	} else {
		// Get cat of single post.
		$cats = pure_get_cats_id();

		$args = array(
			'post_type'      => 'post',
			'order'          => 'DESC',
			'posts_per_page' => $posts_per_page,
			'category__in'   => $cats,
		);
	}

	$the_query = new WP_Query( $args );

	// Start output.
	if ( $the_query->have_posts() && $the_query->found_posts > 1 ) : ?>

        <div class="pure-related-posts">

            <h3 class="pure-title"><?php echo esc_html( $related[ 'title' ] ); ?></h3>
			<?php pure_related_posts_loop( $the_query, $posts_per_page ); ?>
        </div> <!-- /.pure-related-posts -->

	<?php endif;
	wp_reset_postdata(); // Restore the main query.
}

if ( !function_exists( 'pure_related_posts_loop' ) ) {
	function pure_related_posts_loop( $the_query, $posts_per_page ) {

		$current_post_id = get_the_ID();

		$count = 1;
		?>
        <ul class="posts-list related-posts">
			<?php while ( $the_query->have_posts() ) : $the_query->the_post();

				if ( get_the_ID() === $current_post_id ) {
					continue;
				}

				if ( $count === $posts_per_page ) {
					continue;
				}

				pure_tag( array(
					'open'    => '<li %s>',
					'context' => 'entry',
				) );

				$title = sprintf(
					'<a href="%1$s" rel="bookmark" title="%2$s">%2$s</a>',
					get_permalink(),
					get_the_title()
				);

				$tag = apply_filters( 'pure_entry_related_title_tag', 'span' );

				pure_tag( array(
					'open'    => "<{$tag} %s>",
					'close'   => "</{$tag}>",
					'content' => $title,
					'context' => 'entry-title',
				) );

				pure_tag( array(
					'close'   => '</li>',
					'context' => 'entry',
				) );

				$count++;

			endwhile; ?>
        </ul> <!-- /.posts-list -->
		<?php
	}
}

add_action( 'pure_after_entry', 'pure_comment_template', 20 );
/**
 * Comment template.
 */
function pure_comment_template() {

	if ( !is_single() && !is_page() ) {
		return;
	}

	if ( !is_page() ) {
		echo '<div class="fb-comments" data-href="' . get_permalink() . '" data-width="100%" data-numposts="5"></div>';
	}

	// If comments are open or we have at least one comment, load up the comment template.
	if ( comments_open() || get_comments_number() ) {
		comments_template();
	}
}

add_filter( 'comment_form_default_fields', 'pure_update_comment_fields' );
/**
 * Update comment fields to show placeholder.
 *
 * @param $fields
 *
 * @return mixed
 */
function pure_update_comment_fields( $fields ) {

	$commenter = wp_get_current_commenter();
	$req       = get_option( 'require_name_email' );
	$aria_req  = $req ? "aria-required='true'" : '';

	$fields[ 'author' ]
		= '<p class="comment-form-author">
			<input id="author" name="author" type="text" placeholder="' . esc_attr__( "Name: John Doe", 'pure' ) . '" value="' . esc_attr( $commenter[ 'comment_author' ] ) .
		'" size="30" ' . $aria_req . ' />
		</p>';

	$fields[ 'email' ]
		= '<p class="comment-form-email">
			<input id="email" name="email" type="email" placeholder="' . esc_attr__( "Email: name@email.com", 'pure' ) . '" value="' . esc_attr( $commenter[ 'comment_author_email' ] ) .
		'" size="30" ' . $aria_req . ' />
		</p>';

	if ( apply_filters( 'pure_disable_url_comment_field', true ) ) {
		unset( $fields[ 'url' ] );
	} else {
		$fields[ 'url' ]
			= '<p class="comment-form-url">
			<input id="url" name="url" type="url"  placeholder="' . esc_attr__( 'Website: https://domain.com', 'pure' ) . '" value="' . esc_attr( $commenter[ 'comment_author_url' ] ) .
			'" size="30" />
			</p>';

	}

	return $fields;
}

add_filter( 'comment_form_defaults', 'pure_update_comment_field' );
/**
 * Add placeholder to comment field.
 *
 * @param $fields
 *
 * @return mixed
 */
function pure_update_comment_field( $fields ) {

	$fields[ 'comment_field' ]
		= '<p class="comment-form-comment">
<textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" aria-required="true" required="required" placeholder="' . esc_html__( 'Type your comments..', 'pure' ) . '"></textarea></p>';

	return $fields;
}

/**
 * Loop handler.
 */

/**
 * Add wrapper div to wrap text content.
 */
add_action( 'pure_before_entry', 'pure_entry_info_open' );
/**
 * Entry info div open.
 */
function pure_entry_info_open() {

	if ( is_singular() ) {
		return;
	}
	pure_tag( array(
		'open'    => '<div %s>',
		'context' => 'entry-info',
	) );
}

add_action( 'pure_after_entry', 'pure_entry_info_close' );
/**
 * Entry info div close.
 */
function pure_entry_info_close() {

	if ( is_singular() ) {
		return;
	}
	pure_tag( array(
		'close'   => '</div>',
		'context' => 'entry-info',
	) );
}

add_action( 'pure_before_entry', 'pure_loop_thumbnail', 5 );
/**
 * Add thumbnail to loop item.
 */
function pure_loop_thumbnail() {

	if ( !is_singular() ) {
		pure_entry_thumbnail( apply_filters( 'pure_thumbnail_size', array(
			'width'  => '369',
			'height' => '214',
		) ) );
	}
}

